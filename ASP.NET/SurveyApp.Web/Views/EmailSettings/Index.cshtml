
@model SurveyApp.Web.Models.EmailSettingsViewModel
@{
    ViewData["Title"] = "Configuración de Email";
    var selectedSurveyId = Model.SelectedSurveyId.HasValue ? Model.SelectedSurveyId.Value.ToString() : "";
}

<link rel="stylesheet" href="~/css/emailSettings.css" />

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-2xl font-bold">Configuración de Email</h1>
            <p class="text-gray-600">
                Administra la configuración de entrega de emails para tus encuestas
            </p>
        </div>
        
        <div class="flex space-x-3">
            <a href="@Url.Action("Index", "Surveys")" class="btn btn-outline flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
                Volver
            </a>
            <button id="saveConfig" class="btn btn-primary flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
                    <polyline points="17 21 17 13 7 13 7 21"/>
                    <polyline points="7 3 7 8 15 8"/>
                </svg>
                Guardar configuración
            </button>
        </div>
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div class="card p-6">
            <h2 class="text-xl font-semibold mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                    <line x1="8" y1="6" x2="21" y2="6"></line>
                    <line x1="8" y1="12" x2="21" y2="12"></line>
                    <line x1="8" y1="18" x2="21" y2="18"></line>
                    <line x1="3" y1="6" x2="3.01" y2="6"></line>
                    <line x1="3" y1="12" x2="3.01" y2="12"></line>
                    <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
                Encuestas
            </h2>
            <div class="max-h-[500px] overflow-auto">
                <table class="survey-table">
                    <thead>
                        <tr>
                            <th>Título</th>
                            <th>Fecha</th>
                            <th class="text-right">Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="@(selectedSurveyId == "" ? "selected" : "")">
                            <td class="font-medium">Configuración global</td>
                            <td>-</td>
                            <td class="text-right">
                                <a href="@Url.Action("Index", "EmailSettings")" class="btn @(selectedSurveyId == "" ? "btn-primary" : "btn-outline") p-1 px-2 text-sm">
                                    Seleccionar
                                </a>
                            </td>
                        </tr>
                        @foreach (var survey in Model.Surveys)
                        {
                            <tr class="@(selectedSurveyId == survey.Id.ToString() ? "selected" : "")">
                                <td class="font-medium">
                                    <div class="flex flex-col">
                                        <span>@survey.Title</span>
                                        @if (survey.HasCustomDeliveryConfig)
                                        {
                                            <span class="badge badge-outline mt-1">
                                                Configuración personalizada
                                            </span>
                                        }
                                    </div>
                                </td>
                                <td>@survey.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td class="text-right">
                                    <a href="@Url.Action("Index", "EmailSettings", new { surveyId = survey.Id })" class="btn @(selectedSurveyId == survey.Id.ToString() ? "btn-primary" : "btn-outline") p-1 px-2 text-sm">
                                        Seleccionar
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="card p-6 lg:col-span-2">
            <h2 class="text-xl font-semibold mb-2">
                @(Model.SelectedSurveyId.HasValue ? "Configuración específica de encuesta" : "Configuración global de email")
            </h2>
            @if (Model.SelectedSurveyId.HasValue)
            {
                var selectedSurvey = Model.Surveys.FirstOrDefault(s => s.Id == Model.SelectedSurveyId);
                if (selectedSurvey != null)
                {
                    <p class="text-sm text-gray-600 mb-4">
                        Configurando encuesta: @selectedSurvey.Title
                    </p>
                }
            }
            
            <p class="mb-4">
                @if (Model.SelectedSurveyId.HasValue)
                {
                    <text>Esta configuración se aplicará solo a la encuesta seleccionada.</text>
                }
                else
                {
                    <text>Esta configuración se aplicará como predeterminada para todas las nuevas encuestas. Puedes sobrescribir esta configuración para encuestas individuales.</text>
                }
            </p>
            
            <input type="hidden" id="selectedSurveyId" value="@selectedSurveyId" />
            
            <div class="card">
                <div class="p-4">
                    <h3 class="text-lg font-medium mb-3">Método de envío</h3>
                    <div class="tabs">
                        <div class="tab @(Model.DeliveryConfig.Type == "manual" ? "active" : "")" data-tab="manual">Manual</div>
                        <div class="tab @(Model.DeliveryConfig.Type == "scheduled" ? "active" : "")" data-tab="scheduled">Programado</div>
                        <div class="tab @(Model.DeliveryConfig.Type == "triggered" ? "active" : "")" data-tab="triggered">Por eventos</div>
                    </div>
                    
                    <div class="tab-content @(Model.DeliveryConfig.Type == "manual" ? "active" : "")" id="tab-manual">
                        <p class="text-gray-600">
                            Envía esta encuesta manualmente a direcciones de correo específicas.
                        </p>
                    </div>
                    
                    <div class="tab-content @(Model.DeliveryConfig.Type == "scheduled" ? "active" : "")" id="tab-scheduled">
                        <p class="text-gray-600 mb-4">
                            Programa esta encuesta para ser enviada automáticamente en intervalos regulares.
                        </p>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">Frecuencia</label>
                                <div class="space-y-2">
                                    <div class="flex items-center space-x-2">
                                        <input type="radio" name="frequency" id="daily" value="daily" class="h-4 w-4" 
                                            @(Model.DeliveryConfig.Schedule?.Frequency == "daily" ? "checked" : "") />
                                        <label for="daily">Diario</label>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="radio" name="frequency" id="weekly" value="weekly" class="h-4 w-4" 
                                            @(Model.DeliveryConfig.Schedule?.Frequency == "weekly" ? "checked" : "") />
                                        <label for="weekly">Semanal</label>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="radio" name="frequency" id="monthly" value="monthly" class="h-4 w-4" 
                                            @(Model.DeliveryConfig.Schedule?.Frequency == "monthly" ? "checked" : "") />
                                        <label for="monthly">Mensual</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div id="weekday-selector" class="@(Model.DeliveryConfig.Schedule?.Frequency == "weekly" ? "" : "hidden")">
                                <label class="block text-sm font-medium mb-1">Día de la semana</label>
                                <div class="grid grid-cols-2 md:grid-cols-4 gap-2">
                                    @foreach (var day in new[] { "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo" })
                                    {
                                        var dayIndex = Array.IndexOf(new[] { "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo" }, day) + 1;
                                        <div class="flex items-center space-x-2">
                                            <input type="radio" name="day-of-week" id="day-@dayIndex" value="@dayIndex" class="h-4 w-4" 
                                                @(Model.DeliveryConfig.Schedule?.DayOfWeek == dayIndex ? "checked" : "") />
                                            <label for="day-@dayIndex">@day</label>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <div id="monthday-selector" class="@(Model.DeliveryConfig.Schedule?.Frequency == "monthly" ? "" : "hidden")">
                                <label class="block text-sm font-medium mb-1">Día del mes</label>
                                <input type="number" min="1" max="31" id="day-of-month" 
                                       value="@(Model.DeliveryConfig.Schedule?.DayOfMonth ?? 1)" 
                                       class="border rounded p-2 w-20" />
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium mb-1">Hora</label>
                                <input type="time" id="schedule-time" 
                                       value="@(Model.DeliveryConfig.Schedule?.Time ?? "09:00")" 
                                       class="border rounded p-2 w-32" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="tab-content @(Model.DeliveryConfig.Type == "triggered" ? "active" : "")" id="tab-triggered">
                        <p class="text-gray-600 mb-4">
                            Envía esta encuesta cuando ocurran eventos específicos en tu sistema.
                        </p>
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">Evento disparador</label>
                                <div class="space-y-2">
                                    <div class="flex items-center space-x-2">
                                        <input type="radio" name="trigger-type" id="ticket-closed" value="ticket-closed" class="h-4 w-4" 
                                            @(Model.DeliveryConfig.Trigger?.Type == "ticket-closed" ? "checked" : "") />
                                        <label for="ticket-closed">Después de cerrar un ticket</label>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="radio" name="trigger-type" id="purchase-completed" value="purchase-completed" class="h-4 w-4" 
                                            @(Model.DeliveryConfig.Trigger?.Type == "purchase-completed" ? "checked" : "") />
                                        <label for="purchase-completed">Después de completar una compra</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium mb-1">Retraso (horas)</label>
                                <input type="number" min="0" max="168" id="delay-hours" 
                                       value="@(Model.DeliveryConfig.Trigger?.DelayHours ?? 24)" 
                                       class="border rounded p-2 w-20" />
                            </div>
                            
                            <div class="flex items-center space-x-2">
                                <div class="toggle-container">
                                    <input type="checkbox" id="send-automatically" class="toggle" 
                                           @(Model.DeliveryConfig.Trigger?.SendAutomatically == true ? "checked" : "") />
                                    <span class="toggle-slider"></span>
                                </div>
                                <label for="send-automatically">Enviar automáticamente</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="border-t pt-6 mt-6">
                <h3 class="text-lg font-medium mb-3">Destinatarios</h3>
                
                <div class="space-y-4">
                    <div class="flex gap-2">
                        <input id="email-input" type="email" placeholder="Introduce dirección de correo" class="border rounded p-2 flex-1" />
                        <button id="add-email" class="btn btn-outline">
                            Añadir
                        </button>
                    </div>
                    
                    <div class="flex gap-2">
                        <button id="search-customers" class="btn btn-outline w-full sm:w-auto flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                                <circle cx="11" cy="11" r="8"></circle>
                                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                            </svg>
                            Buscar Clientes
                        </button>
                        <button id="select-all-emails" class="btn btn-outline flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                                <polyline points="9 11 12 14 22 4"></polyline>
                                <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                            </svg>
                            Seleccionar todos
                        </button>
                        <button id="deselect-all-emails" class="btn btn-outline flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="15" y1="9" x2="9" y2="15"></line>
                                <line x1="9" y1="9" x2="15" y2="15"></line>
                            </svg>
                            Deseleccionar todos
                        </button>
                    </div>
                    
                    <div id="email-list-container" class="border rounded-md p-4">
                        <div class="flex items-center justify-between px-2">
                            <h4 class="text-sm font-medium">
                                <span id="email-count">@(Model.DeliveryConfig.EmailAddresses?.Count ?? 0)</span> Destinatarios
                            </h4>
                            <button id="toggle-email-list" class="btn btn-outline p-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="6 9 12 15 18 9"></polyline>
                                </svg>
                            </button>
                        </div>
                        
                        <div id="email-list" class="mt-2 hidden">
                            <div class="flex flex-col space-y-2">
                                @if (Model.DeliveryConfig.EmailAddresses != null)
                                {
                                    foreach (var email in Model.DeliveryConfig.EmailAddresses)
                                    {
                                        <div class="flex items-center justify-between p-2 bg-gray-100 rounded-md email-item">
                                            <div class="flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 text-gray-600">
                                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                                    <circle cx="12" cy="7" r="4"></circle>
                                                </svg>
                                                <div>
                                                    <div class="font-medium">@email.Split('@')[0]</div>
                                                    <div class="text-sm text-gray-600">@email</div>
                                                </div>
                                            </div>
                                            <button class="remove-email h-6 w-6 rounded-full flex items-center justify-center hover:bg-gray-200" data-email="@email">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                    <line x1="18" y1="6" x2="6" y2="18"></line>
                                                    <line x1="6" y1="6" x2="18" y2="18"></line>
                                                </svg>
                                            </button>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (Model.SelectedSurveyId.HasValue)
            {
                <div class="mt-6 border-t pt-6 flex flex-wrap gap-4">
                    <button id="send-now" class="btn btn-primary flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                        </svg>
                        Enviar ahora
                    </button>

                    <button id="schedule-send" class="btn btn-outline flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                            <line x1="16" y1="2" x2="16" y2="6"></line>
                            <line x1="8" y1="2" x2="8" y2="6"></line>
                            <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        Programar envío
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal para búsqueda de clientes -->
<div id="customer-search-modal" class="modal hidden">
    <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-bold">Buscar Clientes</h3>
            <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        
        <div class="mb-4">
            <input type="text" id="customer-search" placeholder="Buscar por nombre o email" class="w-full p-2 border rounded">
        </div>
        
        <div id="customer-results" class="max-h-96 overflow-auto mb-4">
            <!-- Los resultados de la búsqueda se cargarán aquí -->
            <div class="text-center py-4 text-gray-500">Buscando clientes...</div>
        </div>
        
        <div class="flex justify-end">
            <button id="add-selected-customers" class="btn btn-primary">Añadir seleccionados</button>
        </div>
    </div>
</div>

<!-- Modal para confirmar envío -->
<div id="confirm-send-modal" class="modal hidden">
    <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-bold">Confirmar envío de emails</h3>
            <button class="close-modal text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        
        <p class="mb-4">Se enviarán correos electrónicos a <span id="recipient-count">0</span> destinatarios.</p>
        <p class="mb-6">¿Estás seguro de que quieres proceder?</p>
        
        <div class="flex justify-end space-x-2">
            <button class="close-modal btn btn-outline">Cancelar</button>
            <button id="confirm-send" class="btn btn-primary">Confirmar envío</button>
        </div>
    </div>
</div>

<!-- Modal para confirmar programación -->
<div id="confirm-schedule-modal" class="modal hidden">
    <div class="modal-content">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-bold">Confirmar programación de emails</h3>
            <button class="close-modal text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
        
        <p class="mb-4" id="schedule-description"></p>
        <p class="mb-6">¿Estás seguro de que quieres programar estos envíos?</p>
        
        <div class="flex justify-end space-x-2">
            <button class="close-modal btn btn-outline">Cancelar</button>
            <button id="confirm-schedule" class="btn btn-primary">Confirmar programación</button>
        </div>
    </div>
</div>

<!-- Toast para notificaciones -->
<div id="toast" class="fixed top-4 right-4 p-4 bg-white shadow-lg rounded-md transition-opacity opacity-0 pointer-events-none max-w-sm">
    <div class="flex items-center">
        <div id="toast-icon" class="flex-shrink-0 h-6 w-6 mr-3"></div>
        <div>
            <p id="toast-title" class="font-medium"></p>
            <p id="toast-message" class="text-sm text-gray-600"></p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variables para almacenar el estado de la configuración
            const deliveryConfig = {
                type: "@Model.DeliveryConfig.Type",
                emailAddresses: @Html.Raw(Json.Serialize(Model.DeliveryConfig.EmailAddresses ?? new List<string>())),
                includeAllCustomers: @Json.Serialize(Model.DeliveryConfig.IncludeAllCustomers),
                customerTypeFilter: "@Model.DeliveryConfig.CustomerTypeFilter",
                schedule: {
                    frequency: "@(Model.DeliveryConfig.Schedule?.Frequency ?? "weekly")",
                    dayOfMonth: @(Model.DeliveryConfig.Schedule?.DayOfMonth ?? 1),
                    dayOfWeek: @(Model.DeliveryConfig.Schedule?.DayOfWeek ?? 1),
                    time: "@(Model.DeliveryConfig.Schedule?.Time ?? "09:00")"
                },
                trigger: {
                    type: "@(Model.DeliveryConfig.Trigger?.Type ?? "ticket-closed")",
                    delayHours: @(Model.DeliveryConfig.Trigger?.DelayHours ?? 24),
                    sendAutomatically: @(Model.DeliveryConfig.Trigger?.SendAutomatically ? "true" : "false")
                }
            };

            // Pestañas para método de entrega
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabType = this.dataset.tab;
                    
                    // Actualizar clases de pestañas
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Mostrar contenido de la pestaña seleccionada
                    document.querySelectorAll('.tab-content').forEach(content => {
                        content.classList.remove('active');
                    });
                    document.getElementById(`tab-${tabType}`).classList.add('active');
                    
                    // Actualizar tipo de entrega en la configuración
                    deliveryConfig.type = tabType;
                });
            });

            // Manejo de configuración programada
            document.querySelectorAll('input[name="frequency"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    const frequency = this.value;
                    deliveryConfig.schedule.frequency = frequency;
                    
                    // Mostrar/ocultar selectores de día según frecuencia
                    if (frequency === 'weekly') {
                        document.getElementById('weekday-selector').classList.remove('hidden');
                        document.getElementById('monthday-selector').classList.add('hidden');
                    } else if (frequency === 'monthly') {
                        document.getElementById('weekday-selector').classList.add('hidden');
                        document.getElementById('monthday-selector').classList.remove('hidden');
                    } else {
                        document.getElementById('weekday-selector').classList.add('hidden');
                        document.getElementById('monthday-selector').classList.add('hidden');
                    }
                });
            });

            // Día de la semana
            document.querySelectorAll('input[name="day-of-week"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    deliveryConfig.schedule.dayOfWeek = parseInt(this.value);
                });
            });

            // Día del mes
            document.getElementById('day-of-month').addEventListener('change', function() {
                if (this.value >= 1 && this.value <= 31) {
                    deliveryConfig.schedule.dayOfMonth = parseInt(this.value);
                }
            });

            // Hora programada
            document.getElementById('schedule-time').addEventListener('change', function() {
                deliveryConfig.schedule.time = this.value;
            });

            // Manejo de configuración por eventos
            document.querySelectorAll('input[name="trigger-type"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    deliveryConfig.trigger.type = this.value;
                });
            });

            // Retraso en horas
            document.getElementById('delay-hours').addEventListener('change', function() {
                if (this.value >= 0 && this.value <= 168) {
                    deliveryConfig.trigger.delayHours = parseInt(this.value);
                }
            });

            // Enviar automáticamente
            document.getElementById('send-automatically').addEventListener('change', function() {
                deliveryConfig.trigger.sendAutomatically = this.checked;
            });

            // Gestión de emails
            const emailInput = document.getElementById('email-input');
            const addEmailBtn = document.getElementById('add-email');
            const emailList = document.getElementById('email-list');
            const emailCount = document.getElementById('email-count');
            const toggleEmailListBtn = document.getElementById('toggle-email-list');
            
            // Función para mostrar/ocultar lista de emails
            toggleEmailListBtn.addEventListener('click', function() {
                if (emailList.classList.contains('hidden')) {
                    emailList.classList.remove('hidden');
                    toggleEmailListBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="18 15 12 9 6 15"></polyline>
                    </svg>`;
                } else {
                    emailList.classList.add('hidden');
                    toggleEmailListBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="6 9 12 15 18 9"></polyline>
                    </svg>`;
                }
            });

            // Añadir email
            addEmailBtn.addEventListener('click', addEmail);
            emailInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    addEmail();
                }
            });

            function addEmail() {
                const email = emailInput.value.trim();
                if (!email || !isValidEmail(email)) return;
                
                if (!deliveryConfig.emailAddresses.includes(email)) {
                    deliveryConfig.emailAddresses.push(email);
                    updateEmailList();
                    emailInput.value = '';
                }
            }

            function isValidEmail(email) {
                return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
            }

            // Función para actualizar la lista de emails en la UI
            function updateEmailList() {
                emailCount.textContent = deliveryConfig.emailAddresses.length;
                
                // Limpiar lista actual
                while (emailList.firstChild) {
                    emailList.removeChild(emailList.firstChild);
                }
                
                // Contenedor para emails
                const emailContainer = document.createElement('div');
                emailContainer.className = 'flex flex-col space-y-2';
                
                // Añadir cada email a la lista
                deliveryConfig.emailAddresses.forEach(email => {
                    const emailItem = document.createElement('div');
                    emailItem.className = 'flex items-center justify-between p-2 bg-gray-100 rounded-md email-item';
                    
                    const emailContent = `
                        <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 text-gray-600">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                            <div>
                                <div class="font-medium">${email.split('@')[0]}</div>
                                <div class="text-sm text-gray-600">${email}</div>
                            </div>
                        </div>
                        <button class="remove-email h-6 w-6 rounded-full flex items-center justify-center hover:bg-gray-200" data-email="${email}">
                            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                        </button>
                    `;
                    
                    emailItem.innerHTML = emailContent;
                    emailContainer.appendChild(emailItem);
                });
                
                emailList.appendChild(emailContainer);
                
                // Añadir eventos para eliminar emails
                document.querySelectorAll('.remove-email').forEach(button => {
                    button.addEventListener('click', function() {
                        const emailToRemove = this.dataset.email;
                        deliveryConfig.emailAddresses = deliveryConfig.emailAddresses.filter(e => e !== emailToRemove);
                        updateEmailList();
                    });
                });
                
                // Si hay emails, mostrar la lista
                if (deliveryConfig.emailAddresses.length > 0 && emailList.classList.contains('hidden')) {
                    emailList.classList.remove('hidden');
                }
            }

            // Inicializar la lista de emails
            updateEmailList();

            // Seleccionar/deseleccionar todos los emails
            document.getElementById('select-all-emails').addEventListener('click', async function() {
                try {
                    const response = await fetch('@Url.Action("GetCustomerEmails", "EmailSettings")');
                    if (response.ok) {
                        const emails = await response.json();
                        if (emails && emails.length > 0) {
                            // Añadir emails que no estén ya en la lista
                            const newEmails = emails.filter(email => !deliveryConfig.emailAddresses.includes(email));
                            deliveryConfig.emailAddresses = [...deliveryConfig.emailAddresses, ...newEmails];
                            updateEmailList();
                            showToast('Éxito', 'Todos los emails seleccionados', 'success');
                        }
                    } else {
                        console.error('Error al obtener emails');
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });

            document.getElementById('deselect-all-emails').addEventListener('click', function() {
                deliveryConfig.emailAddresses = [];
                updateEmailList();
                showToast('Información', 'Todos los emails deseleccionados', 'info');
            });

            // Modal de búsqueda de clientes
            const customerSearchModal = document.getElementById('customer-search-modal');
            const searchCustomersBtn = document.getElementById('search-customers');
            const closeModalBtn = document.getElementById('close-modal');
            const customerSearchInput = document.getElementById('customer-search');
            const customerResultsContainer = document.getElementById('customer-results');
            const addSelectedCustomersBtn = document.getElementById('add-selected-customers');
            
            // Abrir modal de búsqueda
            searchCustomersBtn.addEventListener('click', async function() {
                customerSearchModal.classList.remove('hidden');
                await loadCustomers();
            });
            
            // Cerrar modal
            closeModalBtn.addEventListener('click', function() {
                customerSearchModal.classList.add('hidden');
            });
            
            // Buscar clientes al escribir
            customerSearchInput.addEventListener('input', debounce(async function() {
                await loadCustomers(this.value);
            }, 300));
            
            // Cargar clientes del servidor
            async function loadCustomers(search = '') {
                customerResultsContainer.innerHTML = '<div class="text-center py-4 text-gray-500">Buscando clientes...</div>';
                
                try {
                    const response = await fetch(`@Url.Action("GetCustomers", "EmailSettings")?search=${search}`);
                    if (response.ok) {
                        const customers = await response.json();
                        renderCustomerResults(customers);
                    } else {
                        customerResultsContainer.innerHTML = '<div class="text-center py-4 text-gray-500">Error al cargar clientes</div>';
                    }
                } catch (error) {
                    console.error('Error:', error);
                    customerResultsContainer.innerHTML = '<div class="text-center py-4 text-gray-500">Error al cargar clientes</div>';
                }
            }
            
            // Renderizar resultados de búsqueda
            function renderCustomerResults(customers) {
                if (!customers || customers.length === 0) {
                    customerResultsContainer.innerHTML = '<div class="text-center py-4 text-gray-500">No se encontraron clientes</div>';
                    return;
                }
                
                let html = '';
                customers.forEach(customer => {
                    const isSelected = deliveryConfig.emailAddresses.includes(customer.email);
                    html += `
                        <div class="customer-result flex items-center justify-between p-2 hover:bg-gray-100 rounded-md">
                            <div class="flex items-center">
                                <input type="checkbox" class="customer-checkbox mr-2" 
                                       data-email="${customer.email}" ${isSelected ? 'checked' : ''}>
                                <div>
                                    <div class="font-medium">${customer.name}</div>
                                    <div class="text-sm text-gray-600">${customer.email}</div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                customerResultsContainer.innerHTML = html;
                
                // Añadir eventos a los checkboxes
                document.querySelectorAll('.customer-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const email = this.dataset.email;
                        if (this.checked && !deliveryConfig.emailAddresses.includes(email)) {
                            deliveryConfig.emailAddresses.push(email);
                        } else if (!this.checked) {
                            deliveryConfig.emailAddresses = deliveryConfig.emailAddresses.filter(e => e !== email);
                        }
                    });
                });
            }
            
            // Añadir clientes seleccionados y cerrar modal
            addSelectedCustomersBtn.addEventListener('click', function() {
                updateEmailList();
                customerSearchModal.classList.add('hidden');
            });

            // Utility function para debounce
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // Guardar configuración
            document.getElementById('saveConfig').addEventListener('click', async function() {
                const surveyId = document.getElementById('selectedSurveyId').value;
                
                try {
                    let url, method;
                    if (surveyId) {
                        url = `@Url.Action("SaveSurveyConfig", "EmailSettings")?surveyId=${surveyId}`;
                    } else {
                        url = '@Url.Action("SaveGlobalConfig", "EmailSettings")';
                    }
                    
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': '@Html.AntiForgeryToken().GetHtml()'
                        },
                        body: JSON.stringify(deliveryConfig)
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            showToast('Éxito', result.message, 'success');
                        } else {
                            showToast('Error', result.message, 'error');
                        }
                    } else {
                        showToast('Error', 'Error al guardar la configuración', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error', 'Error de conexión', 'error');
                }
            });

            // Enviar emails ahora
            const sendNowBtn = document.getElementById('send-now');
            if (sendNowBtn) {
                sendNowBtn.addEventListener('click', function() {
                    if (!deliveryConfig.emailAddresses.length) {
                        showToast('Error', 'No hay destinatarios seleccionados', 'error');
                        return;
                    }
                    
                    // Mostrar modal de confirmación
                    document.getElementById('recipient-count').textContent = deliveryConfig.emailAddresses.length;
                    document.getElementById('confirm-send-modal').classList.remove('hidden');
                });
            }
            
            // Confirmar envío
            document.getElementById('confirm-send').addEventListener('click', async function() {
                const surveyId = document.getElementById('selectedSurveyId').value;
                if (!surveyId) return;
                
                try {
                    this.disabled = true;
                    this.textContent = 'Enviando...';
                    
                    const response = await fetch('@Url.Action("SendSurveyEmails", "EmailSettings")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': '@Html.AntiForgeryToken().GetHtml()'
                        },
                        body: JSON.stringify({
                            surveyId: parseInt(surveyId),
                            emailAddresses: deliveryConfig.emailAddresses
                        })
                    });
                    
                    document.getElementById('confirm-send-modal').classList.add('hidden');
                    
                    if (response.ok) {
                        const result = await response.json();
                        showToast('Resultado', result.message, result.success ? 'success' : 'error');
                    } else {
                        showToast('Error', 'Error al enviar los correos', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error', 'Error de conexión', 'error');
                } finally {
                    this.disabled = false;
                    this.textContent = 'Confirmar envío';
                }
            });

            // Programar envío
            const scheduleSendBtn = document.getElementById('schedule-send');
            if (scheduleSendBtn) {
                scheduleSendBtn.addEventListener('click', function() {
                    if (!deliveryConfig.emailAddresses.length) {
                        showToast('Error', 'No hay destinatarios seleccionados', 'error');
                        return;
                    }
                    
                    if (deliveryConfig.type !== 'scheduled' && deliveryConfig.type !== 'triggered') {
                        showToast('Error', 'Selecciona un método de entrega programado o por eventos', 'error');
                        return;
                    }
                    
                    // Generar descripción para el modal
                    let description = '';
                    if (deliveryConfig.type === 'scheduled') {
                        description = `Se programará el envío de correos a ${deliveryConfig.emailAddresses.length} destinatarios `;
                        if (deliveryConfig.schedule.frequency === 'daily') description += 'diariamente';
                        else if (deliveryConfig.schedule.frequency === 'weekly') description += 'semanalmente';
                        else if (deliveryConfig.schedule.frequency === 'monthly') description += 'mensualmente';
                        if (deliveryConfig.schedule.time) description += ` a las ${deliveryConfig.schedule.time}`;
                        description += '.';
                    } else {
                        description = `Se configurará el envío automático a ${deliveryConfig.emailAddresses.length} destinatarios cuando se produzca el evento "${deliveryConfig.trigger.type === 'ticket-closed' ? 'cierre de ticket' : 'compra completada'}" `;
                        if (deliveryConfig.trigger.delayHours > 0) {
                            description += `con un retraso de ${deliveryConfig.trigger.delayHours} horas.`;
                        } else {
                            description += '.';
                        }
                    }
                    
                    document.getElementById('schedule-description').textContent = description;
                    document.getElementById('confirm-schedule-modal').classList.remove('hidden');
                });
            }
            
            // Confirmar programación
            document.getElementById('confirm-schedule').addEventListener('click', async function() {
                const surveyId = document.getElementById('selectedSurveyId').value;
                if (!surveyId) return;
                
                try {
                    this.disabled = true;
                    this.textContent = 'Programando...';
                    
                    const response = await fetch('@Url.Action("SaveSurveyConfig", "EmailSettings")?surveyId=' + surveyId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': '@Html.AntiForgeryToken().GetHtml()'
                        },
                        body: JSON.stringify(deliveryConfig)
                    });
                    
                    document.getElementById('confirm-schedule-modal').classList.add('hidden');
                    
                    if (response.ok) {
                        const result = await response.json();
                        showToast('Resultado', 'Programación configurada exitosamente', 'success');
                    } else {
                        showToast('Error', 'Error al configurar la programación', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error', 'Error de conexión', 'error');
                } finally {
                    this.disabled = false;
                    this.textContent = 'Confirmar programación';
                }
            });

            // Cerrar modales
            document.querySelectorAll('.close-modal').forEach(button => {
                button.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    modal.classList.add('hidden');
                });
            });

            // Función para mostrar toast
            function showToast(title, message, type) {
                const toast = document.getElementById('toast');
                const toastTitle = document.getElementById('toast-title');
                const toastMessage = document.getElementById('toast-message');
                const toastIcon = document.getElementById('toast-icon');
                
                // Establecer título y mensaje
                toastTitle.textContent = title;
                toastMessage.textContent = message;
                
                // Configurar icono según tipo
                if (type === 'success') {
                    toastIcon.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                    `;
                } else if (type === 'error') {
                    toastIcon.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-500">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                    `;
                } else {
                    toastIcon.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                    `;
                }
                
                // Mostrar toast
                toast.classList.remove('opacity-0', 'pointer-events-none');
                
                // Ocultar automáticamente después de 5 segundos
                setTimeout(() => {
                    toast.classList.add('opacity-0', 'pointer-events-none');
                }, 5000);
            }
        });
    </script>
}
